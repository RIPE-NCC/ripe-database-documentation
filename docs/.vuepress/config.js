const path = require("path");

const getConfig = require("vuepress-bar");

const { nav, sidebar } = getConfig({addReadMeToFirstGroup: false, mixDirectoriesAndFilesAlphabetically: true, multipleSideBar: false});

const apiServer = process.env.API_SERVER || "stat.ripe.net/data";


const titleMap = new Map([
  ["Database-", "Database "],
  ["in-", "In "],
  ["Is-", "Is "],
  ["Object-", "Object "],
  ["Objects-", "Objects "],
  ["of-", "of "],
  ["Personal-", "Personal "],
  ["Query-", "Query "],
  ["Ripe", "RIPE"],
  ["RIPE-", "RIPE "],
  ["Rpsl", "RPSL"],
  ["the-", "the "],
  ["to-", "to "],
  ["Types-", "Types "],
  ["Supported-", "Supported "],
  ["by-", "by "],
  ["Software-", "Software "],
  ["and-", "and "]
]);


sidebar.forEach((item) => {
if (typeof item.title !== 'undefined') {
  titleMap.forEach((value, key) => {
    if (item.title.includes(key)){
      item.title = item.title.replace(key, value)
    }
  })
}
})

const disableSideNavBar = "---\nsidebar: false\nnavbar: false\nsearch: false\nfooter: false\n---\n";
module.exports = {
  title: "Docs",
  description: "The Database Docs Center",
  dest: process.env.BETA ? 'builds/docsbeta' : 'builds/docs',
  base: process.env.BETA ? '/docsbeta/' : '/docs/',
  head: [
    ['link', { rel: "icon", type: "image/png", sizes: "128x128", href: "/icons/favicon-128x128.png"}],
    ['link', { rel: "icon", type: "image/png", sizes: "96x96", href: "/icons/favicon-96x96.png"}],
    ['link', { rel: "icon", type: "image/png", sizes: "32x32", href: "/icons/favicon-32x32.png"}],
    ['link', { rel: "icon", type: "image/png", sizes: "16x16", href: "/icons/favicon-16x16.png"}],
  ],
  themeConfig: {
    nav: [],
    sidebar: sidebar.filter(s => s !== '25.HTML-Terms-And-Conditions'),
    // setting activeHeaderLinks to true automagically
    // opens the sidebar if it's closed when scrolling along
    // a new anchor.
    activeHeaderLinks: true,
    displayAllHeaders: false,
    collapsable: true,
    sidebarDepth: 1,
    searchMaxSuggestions: 20,
    breadcrumbIcon: false,
    breadcrumb: false,
    iconPrefix: false,
    lastUpdated: 'Last Updated'
  },
  configureWebpack: {
    resolve: {
      alias: {
        '@imgs': path.resolve(__dirname, '../assets/imgs')
      }
    }
  },
  referencesInsidePageFormatter: function (current){
    //Relative links with more than one dash must have just one dash
    var dashRegex= /\-+/g;

    //Link always has the next structure: [*](*#*). We have to remove the second * because now we are pointing to the same doc
    var regex = /(\[.+?(?=\]\())(.+?(?=\#))(.+?(?=\)))/g;

    return current.content.replace(regex, function(matchingWord,firstMatchingPart,secondMatchingPart,thirdMatchingPart){  
      //legal information is generated by TD, it doesn't has third part so we need to modify entire reference 
      if(secondMatchingPart.startsWith("](../Legal-Information") || secondMatchingPart.startsWith("](Legal-Information")){ 
        return firstMatchingPart+ '](' + "#ripe-database-terms-and-conditions"+ ')';
      }
      if(secondMatchingPart.startsWith("](http") || secondMatchingPart.startsWith("](https")){ //dont change absolute links
        return matchingWord;
      }
      var contentNoMoreThanOneDashInLinks = thirdMatchingPart.replace(dashRegex, '-')
      if(contentNoMoreThanOneDashInLinks.startsWith("#x509")){
        contentNoMoreThanOneDashInLinks = contentNoMoreThanOneDashInLinks.replace('#x509', '#x-509')
      }
      return firstMatchingPart+ '](' + contentNoMoreThanOneDashInLinks;
    })
  },
  referencesOtherPageFormatter: function (current){
    //Link always has the next structure: [*](*#*). We have to remove the second * because now we are pointing to the same doc
    var regex = /(\[.+?(?=\]\())(.+?(?=\#))(.+?(?=\)))/g;
    return current.content.replace(regex, function(matchingWord,firstMatchingPart,secondMatchingPart,thirdMatchingPart){   
      //We could call from one static class to another, for example from t&c static page we could call aup page. We can not target to current page, we have to modify the reference to target the correct page
      if(secondMatchingPart.startsWith("](../Legal-Information") || secondMatchingPart.startsWith("](Legal-Information")){
        return firstMatchingPart+ '](' + "terms-conditions"+ ')';
      }
      if(secondMatchingPart.startsWith("](../RIPE-Database-Acceptable-Use-Policy") || secondMatchingPart.startsWith("](RIPE-Database-Acceptable-Use-Policy")){
        return firstMatchingPart+ '](' + "acceptable-use-policy"+ ')';
      }
      if(secondMatchingPart.startsWith("](http") || secondMatchingPart.startsWith("](https")){ //dont change absolute links
        return matchingWord;
      }

      //if link doesn't go to legal or aup static page then it is targeting the full documentation (remember that we are working just with the generated HTML pages, there is not sense to redirect to JS documentation)
      return firstMatchingPart+ '](' + "entire-documentation-HTML" + thirdMatchingPart;
    })
  },
  plugins: [
    [
      'vuepress-plugin-merge-pages',
      {
        bundles: [{
          path: 'entire-documentation-HTML',
          filter: (pages) => {
            return pages.filter(({ path }) => path.match(new RegExp('/*')) && !path.includes('Legal-Information'))
          },
          mergePages: pages => {
            const pageBreak = '<hr class="page-break" />\n\n'
            const initialValue = `${disableSideNavBar}# Entire Documentation HTML\n\n[[TOC]]\n${pageBreak}`

            //frontmatter always start with --- and finish with ---
            var frontmatterRegex=/(^(?!|)*---(.|\n)*---)/g;

            //we dont want to apply any markdown custom script
            var scriptRegex=/(<script(.|\n)*<\/script>)/g;

            //we dont want to apply any markdown custom component
            var customComponentRegex=/(.+?(?=Component \/>)Component \/>)/g;

            return pages
              .reduce((acc, current) => {
                const contentWithCorrectLinks = module.exports.referencesInsidePageFormatter(current)
                const contentWithoutFrontmatter = contentWithCorrectLinks.replace(frontmatterRegex, '')
                const contentWithoutCustomScripts= contentWithoutFrontmatter.replace(scriptRegex, '')
                const contentWithoutCustomComponent = contentWithoutCustomScripts.replace(customComponentRegex, '')

                return `${acc}${current}\n\n${pageBreak}`
              }, initialValue)
          }
        },
        {
          path: 'terms-conditions',
          filter: (pages) => {
            return pages.filter(({ path }) => path.includes('HTML-Terms-And-Conditions'))
          }, 
          mergePages: pages => {
            var frontmatterRegex=/(^(?!|)*---(.|\n)*---)/g;
            const pageBreak = '<hr class="page-break" />\n\n'
            return pages
              .reduce((acc, current) => {
                const contentWithCorrectLinks = module.exports.referencesOtherPageFormatter(current)
                const contentWithoutFrontmatter = contentWithCorrectLinks.replace(frontmatterRegex, '')
                return `${acc}${contentWithoutFrontmatter}\n\n${pageBreak}`
              }, disableSideNavBar)
          }
        },
        {
          path: 'acceptable-use-policy',
          filter: (pages) => {
            return pages.filter(({ path }) => path.includes('RIPE-Database-Acceptable-Use-Policy'))
          },
          mergePages: pages => {
            //frontmatter always start with --- and finish with ---
            var frontmatterRegex=/(^(?!|)*---(.|\n)*---)/g;
            const pageBreak = '<hr class="page-break" />\n\n'
            return pages
              .reduce((acc, current) => {
                const contentWithCorrectLinks = module.exports.referencesOtherPageFormatter(current)
                const contentWithoutFrontmatter = contentWithCorrectLinks.replace(frontmatterRegex, '')
                return `${acc}${contentWithoutFrontmatter}\n\n${pageBreak}`
              }, disableSideNavBar)
          }
        }
      ]
      }
    ],
    [
      'vuepress-plugin-dehydrate',{
        noScript: [
          '**/entire-documentation',
          '**/terms-conditions',
          '**/acceptable-use-policy',
        ],
      },
    ],
    ['@xiaopanda/vuepress-plugin-code-copy', {
        buttonStaticIcon: true,
        buttonIconTitle: 'Copy',
        buttonAlign: 'bottom',
        buttonColor: 'grey'
       }],
    ['@mr-hope/vuepress-plugin-components'],
    ['full-searchbar', { encode: 'icase', tokenize: 'full' }],
    ['@vuepress/last-updated', {
      transformer: (timestamp, lang) => {
        const dayjs = require('dayjs')
        const utc = require('dayjs/plugin/utc')

        dayjs.extend(utc)

        return dayjs(timestamp).utc(true).format()
      }
    }],
    ['@renovamen/vuepress-plugin-mermaid']
	],
  markdown: {
    toc: {
      includeLevel: [1,2],
    },
    extendMarkdown: md => {
      md.use(require('markdown-it-html5-embed'), {
        html5embed: {
          useImageSyntax: true,
          useLinkSyntax: false,
          attributes: {
			  'audio': 'width="740px" controls class="audioplayer"',
			  'video': 'width="740px" height="auto !important" class="audioplayer" controls'
			}
        }
      })
    }
  },
  define: {
    __API_SERVER__: apiServer,
  },
};
